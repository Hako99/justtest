name: cicd-1
on:
  pull_request:
    types: [ opened, synchronize, closed ]
    branches: [ dev ]
    paths:
      - 'src/**'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

  image-build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    # 이 workflow에 리포지토리에 대한 읽기 권한을 부여한다.
    permissions:
      id-token: write
      contents: read
    # 단계 설정
    steps:
      - name: checkout the code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        id: credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: docker build & push
        run: |
          docker build -f Dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }} .
          docker push ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }}
      
  deploy:
    runs-on: ubuntu-latest
    needs: [ image-build ]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout the code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        id: credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      #  1. jdk 버전 설정
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # properties file 생성
      - name: create application.properties
        if: |
          contains(github.ref, 'main')
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      # 2. project에 맞는 gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # 3. gradle build
      - name: gradlew에 실행권한 부여
        run: chmod +x ./gradlew
      - name: Build with Gradle Wrapper ( 프로젝트 빌드 )
        run: ./gradlew build

      # 4. s3에 올릴 zip file 생성
      - name: zip file 생성
        run: |
          mkdir deploy
          cp ./appspec.yml ./deploy/
          cp ./*.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./cicd_test.zip ./deploy
        shell: bash

      # 5. aws 연결
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          aws-region: ap-northeast-2

      # 6. s3 upload
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./cicd_test.zip s3://actions-cicdtest-bucket/skilled_project_bucket/skilled_project.zip

      # 7. code deploy 설정
      - name: Code Deploy
        run: aws deploy create-deployment --application-name spring-deploy
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name spring-deploy-group
          --s3-location bucket=actions-cicdtest-bucket,bundleType=zip,key=skilled_project_bucket/skilled_project.zip
